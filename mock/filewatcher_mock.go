// Copyright 2023 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./filewatcher/filewatcher.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileWatcher is a mock of FileWatcher interface.
type MockFileWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockFileWatcherMockRecorder
}

// MockFileWatcherMockRecorder is the mock recorder for MockFileWatcher.
type MockFileWatcherMockRecorder struct {
	mock *MockFileWatcher
}

// NewMockFileWatcher creates a new mock instance.
func NewMockFileWatcher(ctrl *gomock.Controller) *MockFileWatcher {
	mock := &MockFileWatcher{ctrl: ctrl}
	mock.recorder = &MockFileWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileWatcher) EXPECT() *MockFileWatcherMockRecorder {
	return m.recorder
}

// CallOnceAll mocks base method.
func (m *MockFileWatcher) CallOnceAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallOnceAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// CallOnceAll indicates an expected call of CallOnceAll.
func (mr *MockFileWatcherMockRecorder) CallOnceAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallOnceAll", reflect.TypeOf((*MockFileWatcher)(nil).CallOnceAll))
}

// CallOnceSpecific mocks base method.
func (m *MockFileWatcher) CallOnceSpecific(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallOnceSpecific", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallOnceSpecific indicates an expected call of CallOnceSpecific.
func (mr *MockFileWatcherMockRecorder) CallOnceSpecific(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallOnceSpecific", reflect.TypeOf((*MockFileWatcher)(nil).CallOnceSpecific), key)
}

// DeregisterCallback mocks base method.
func (m *MockFileWatcher) DeregisterCallback(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeregisterCallback", key)
}

// DeregisterCallback indicates an expected call of DeregisterCallback.
func (mr *MockFileWatcherMockRecorder) DeregisterCallback(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterCallback", reflect.TypeOf((*MockFileWatcher)(nil).DeregisterCallback), key)
}

// FilePath mocks base method.
func (m *MockFileWatcher) FilePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// FilePath indicates an expected call of FilePath.
func (mr *MockFileWatcherMockRecorder) FilePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilePath", reflect.TypeOf((*MockFileWatcher)(nil).FilePath))
}

// RegisterCallback mocks base method.
func (m *MockFileWatcher) RegisterCallback(callback func([]byte), key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCallback", callback, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCallback indicates an expected call of RegisterCallback.
func (mr *MockFileWatcherMockRecorder) RegisterCallback(callback, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCallback", reflect.TypeOf((*MockFileWatcher)(nil).RegisterCallback), callback, key)
}

// StartWatching mocks base method.
func (m *MockFileWatcher) StartWatching() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWatching")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartWatching indicates an expected call of StartWatching.
func (mr *MockFileWatcherMockRecorder) StartWatching() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWatching", reflect.TypeOf((*MockFileWatcher)(nil).StartWatching))
}

// StopWatching mocks base method.
func (m *MockFileWatcher) StopWatching() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopWatching")
}

// StopWatching indicates an expected call of StopWatching.
func (mr *MockFileWatcherMockRecorder) StopWatching() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWatching", reflect.TypeOf((*MockFileWatcher)(nil).StopWatching))
}
