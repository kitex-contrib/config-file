// Copyright 2023 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./monitor/monitor.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	parser "github.com/kitex-contrib/config-file/parser"
)

// MockConfigMonitor is a mock of ConfigMonitor interface.
type MockConfigMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMonitorMockRecorder
}

// MockConfigMonitorMockRecorder is the mock recorder for MockConfigMonitor.
type MockConfigMonitorMockRecorder struct {
	mock *MockConfigMonitor
}

// NewMockConfigMonitor creates a new mock instance.
func NewMockConfigMonitor(ctrl *gomock.Controller) *MockConfigMonitor {
	mock := &MockConfigMonitor{ctrl: ctrl}
	mock.recorder = &MockConfigMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigMonitor) EXPECT() *MockConfigMonitorMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockConfigMonitor) Config() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockConfigMonitorMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockConfigMonitor)(nil).Config))
}

// DeregisterCallback mocks base method.
func (m *MockConfigMonitor) DeregisterCallback(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeregisterCallback", key)
}

// DeregisterCallback indicates an expected call of DeregisterCallback.
func (mr *MockConfigMonitorMockRecorder) DeregisterCallback(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterCallback", reflect.TypeOf((*MockConfigMonitor)(nil).DeregisterCallback), key)
}

// Key mocks base method.
func (m *MockConfigMonitor) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockConfigMonitorMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockConfigMonitor)(nil).Key))
}

// RegisterCallback mocks base method.
func (m *MockConfigMonitor) RegisterCallback(callback func(), key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCallback", callback, key)
}

// RegisterCallback indicates an expected call of RegisterCallback.
func (mr *MockConfigMonitorMockRecorder) RegisterCallback(callback, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCallback", reflect.TypeOf((*MockConfigMonitor)(nil).RegisterCallback), callback, key)
}

// SetManager mocks base method.
func (m *MockConfigMonitor) SetManager(manager parser.ConfigManager) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetManager", manager)
}

// SetManager indicates an expected call of SetManager.
func (mr *MockConfigMonitorMockRecorder) SetManager(manager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetManager", reflect.TypeOf((*MockConfigMonitor)(nil).SetManager), manager)
}

// Start mocks base method.
func (m *MockConfigMonitor) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockConfigMonitorMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConfigMonitor)(nil).Start))
}

// Stop mocks base method.
func (m *MockConfigMonitor) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockConfigMonitorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConfigMonitor)(nil).Stop))
}
